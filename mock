package com.cacib.loanscape.config;

import com.cacib.loanscape.common.external.CPY;
import com.cacib.loanscape.oidc.TokenSupplier;
import com.jayway.jsonpath.TypeRef;
import com.netflix.graphql.dgs.client.GraphQLResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.cache.CacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.web.reactive.function.client.ExchangeStrategies;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class ThirdPartyLoaderBeanTest {

    @Mock
    private TokenSupplier tokenSupplier;

    @InjectMocks
    private ThirdPartyLoaderBean thirdPartyLoaderBean;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        // Mocking the TokenSupplier
        when(tokenSupplier.get()).thenReturn(() -> "mock-token");
    }

    @Test
    void testInitAllCacibThirdParties() {
        // Arrange
        CPY mockCPY = new CPY();
        mockCPY.setRicosId("testRicosId");
        mockCPY.setIsCacibEntity("YES");

        // Mocking the doQuery response
        List<CPY> mockThirdParties = List.of(mockCPY);
        doReturn(mockThirdParties).when(thirdPartyLoaderBean).doQuery(
                any(String.class),
                eq("ALL_CACIB_THIRDPARTIES"),
                any(TypeRef.class),
                any(ExchangeStrategies.class)
        );

        // Act
        thirdPartyLoaderBean.initAllCacibThirdParties();

        // Assert
        assertThat(thirdPartyLoaderBean.getCacibThirdParties()).isNotEmpty();
        assertThat(thirdPartyLoaderBean.getCacibThirdParties().get(0).getRicosId()).isEqualTo("testRicosId");
        verify(thirdPartyLoaderBean, times(1)).loadAllCacibThirdParties();
    }

    @Test
    void testCreateIsCacibEntityMap() {
        // Arrange
        CPY mockCPY = new CPY();
        mockCPY.setRicosId("testRicosId");
        mockCPY.setIsCacibEntity("YES");
        thirdPartyLoaderBean.getCacibThirdParties().add(mockCPY);

        // Act
        thirdPartyLoaderBean.createIsCacibEntityMap();

        // Assert
        Map<String, String> result = thirdPartyLoaderBean.getIsCacibEntityForRicosId();
        assertThat(result).isNotEmpty();
        assertThat(result.get("testRicosId")).isEqualTo("YES");
    }

    @Test
    void testDoQueryHandlesNullResults() {
        // Arrange
        doReturn(null).when(thirdPartyLoaderBean).executeQuery(any(String.class), any());

        // Act
        Object result = thirdPartyLoaderBean.doQuery("testQuery", "testQueryName", new TypeRef<Object>() {});

        // Assert
        assertThat(result).isNull();
    }

    @Test
    void testDoAliasQueryHandlesEmptyAliases() {
        // Arrange
        List<String> aliases = Collections.emptyList();

        // Act
        Map<String, Object> result = thirdPartyLoaderBean.doAliasQuery(
                "testQuery", "testQueryName", "", new TypeRef<Object>() {}, aliases);

        // Assert
        assertThat(result).isEmpty();
    }
}
