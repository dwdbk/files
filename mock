import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import static org.mockito.Mockito.*;

class CommonRepositoryHelperTest {

    @Test
    void testMapProjectionWithDealEquityAmountProjection() {
        // Arrange
        CommonRepositoryHelper helper = new CommonRepositoryHelper();
        CriteriaBuilder builder = mock(CriteriaBuilder.class);
        CriteriaQuery<?> query = mock(CriteriaQuery.class);
        Root<?> root = mock(Root.class);

        // Mock behavior
        var rootJoin = mock(Root.class);
        when(root.join("deals")).thenReturn(rootJoin);
        when(rootJoin.get("amount")).thenReturn(mock(javax.persistence.criteria.Path.class));
        when(rootJoin.get("functionalId")).thenReturn(mock(javax.persistence.criteria.Path.class));
        when(rootJoin.get("functionalVersion")).thenReturn(mock(javax.persistence.criteria.Path.class));
        
        // Act
        helper.mapProjection(root, query, "DealEquityAmountProjection");

        // Assert
        verify(query, times(1)).multiselect(any(), any(), any());
    }

    @Test
    void testMapProjectionWithUnsupportedProjectionType() {
        // Arrange
        CommonRepositoryHelper helper = new CommonRepositoryHelper();
        CriteriaBuilder builder = mock(CriteriaBuilder.class);
        CriteriaQuery<?> query = mock(CriteriaQuery.class);
        Root<?> root = mock(Root.class);

        // Act
        helper.mapProjection(root, query, "UnsupportedProjection");

        // Assert
        // In this case, you can verify the logger or ensure no multiselect is called.
        // For simplicity, verifying that no multiselect is invoked:
        verifyNoInteractions(query);
    }
}
